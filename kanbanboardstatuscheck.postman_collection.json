{
	"info": {
		"_postman_id": "e31d6e29-0992-4850-b4e9-7daab7ff4b7c",
		"name": "kanbantests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "list_kanbans",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"\t\tpm.response.to.have.status(200);\r",
							"\t\t});\r",
							"\r",
							"\r",
							"pm.test(\"API responds within the expected treshhold\", () => {\r",
							"  // set the response time in milliseconds\r",
							"  const expectedTimeInMilliseconds = 1000;\r",
							"\r",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"    expectedTimeInMilliseconds + 1,\r",
							"    `The endpoint did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`\r",
							"  );\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The kanban board response has all expected properties\", () => {\r",
							"    //parse the response json,\r",
							" const responseJson = pm.response.json();\r",
							" const kanbanBoards = responseJson[0];\r",
							"\r",
							"pm.expect(kanbanBoards.kanbanBoardTitle).to.be.a(\"string\");\r",
							"pm.expect(kanbanBoards._id).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"The swimlane response has all expected properties\", () => {\r",
							"    //parse the response json,\r",
							" const responseJson = pm.response.json();\r",
							" const kanbanSwimLanes = responseJson[0].kanbanBoardSwimLanes;\r",
							"\r",
							" const todo = kanbanSwimLanes[0];\r",
							" const doing = kanbanSwimLanes[1];\r",
							" const done = kanbanSwimLanes[2]\r",
							"pm.expect(todo.swimLaneTitle).to.be.a(\"string\");\r",
							"pm.expect(doing.swimLaneTitle).to.be.a(\"string\");\r",
							"pm.expect(done.swimLaneTitle).to.be.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{kanban}}/listAllKanbanBoards",
					"host": [
						"{{kanban}}"
					],
					"path": [
						"listAllKanbanBoards"
					]
				}
			},
			"response": []
		},
		{
			"name": "create_kanban",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"\t\tpm.response.to.have.status(200);\r",
							"\t\t});\r",
							"\r",
							"pm.test(\"API responds within the expected treshhold\", () => {\r",
							"  // set the response time in milliseconds\r",
							"  const expectedTimeInMilliseconds = 1000;\r",
							"\r",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"    expectedTimeInMilliseconds + 1,\r",
							"    `The endpoint did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`\r",
							"  );\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"Dummy Kanban\"}"
				},
				"url": {
					"raw": "{{kanban}}/createNewKanbanBoard",
					"host": [
						"{{kanban}}"
					],
					"path": [
						"createNewKanbanBoard"
					]
				}
			},
			"response": []
		},
		{
			"name": "add_swimlane",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"\t\tpm.response.to.have.status(200);\r",
							"\t\t});\r",
							"\r",
							"pm.test(\"API responds within the expected treshhold\", () => {\r",
							"  // set the response time in milliseconds\r",
							"  const expectedTimeInMilliseconds = 1000;\r",
							"\r",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"    expectedTimeInMilliseconds + 1,\r",
							"    `The endpoint did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`\r",
							"  );\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n\t\"kanbanBoardTitle\":\"Dummy Kanban\",\r\n\t\"swimLaneTitle\": \"To do\"\r\n}"
				},
				"url": {
					"raw": "{{kanban}}/addSwimLaneToBoard",
					"host": [
						"{{kanban}}"
					],
					"path": [
						"addSwimLaneToBoard"
					]
				}
			},
			"response": []
		},
		{
			"name": "add_duplicate_swimlane",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {\r",
							"\t\tpm.response.to.have.status(500);\r",
							"\t\t});\r",
							"\r",
							"pm.test(\"API responds within the expected treshhold\", () => {\r",
							"  // set the response time in milliseconds\r",
							"  const expectedTimeInMilliseconds = 1000;\r",
							"\r",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"    expectedTimeInMilliseconds + 1,\r",
							"    `The endpoint did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`\r",
							"  );\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n\t\"kanbanBoardTitle\":\"Dummy Kanban\",\r\n\t\"swimLaneTitle\": \"To do\"\r\n}"
				},
				"url": {
					"raw": "{{kanban}}/addSwimLaneToBoard",
					"host": [
						"{{kanban}}"
					],
					"path": [
						"addSwimLaneToBoard"
					]
				}
			},
			"response": []
		},
		{
			"name": "find_kanban_title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"\t\tpm.response.to.have.status(200);\r",
							"\t\t});\r",
							"\r",
							"pm.test(\"API responds within the expected treshhold\", () => {\r",
							"  // set the response time in milliseconds\r",
							"  const expectedTimeInMilliseconds = 1000;\r",
							"\r",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"    expectedTimeInMilliseconds + 1,\r",
							"    `The endpoint did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`\r",
							"  );\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "title",
						"value": "Dummy Kanban",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{kanban}}/findKanbanBoardByTitle",
					"host": [
						"{{kanban}}"
					],
					"path": [
						"findKanbanBoardByTitle"
					]
				}
			},
			"response": []
		},
		{
			"name": "find_nonexistent_kanban",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "delete_kanban_title",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"Dummy Kanban\"}\r\n"
				},
				"url": {
					"raw": "{{kanban}}/deleteKanbanBoardByTitle",
					"host": [
						"{{kanban}}"
					],
					"path": [
						"deleteKanbanBoardByTitle"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "kanban",
			"value":"http://localhost:9000",
			"type": "string"
		}
	]
}